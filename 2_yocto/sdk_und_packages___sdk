XXXXXXXXXXXXXXXXXXX

Sdk is a toolchain plus sysroot.
It has all fundamentals needed to develop/crosscompile for particular platform.

XXXXXXXXXXXXXXXXXXX

Sdk comes in form of installable shell script, shar (shell archive).

$ ./***-toolchain-***.sh
Enter target directory for SDK (default: /opt/***/1.6.1): sdk
You are about to install the SDK to "/home/***/sdk". Proceed[Y/n]?
Extracting SDK...done
Setting it up...done
SDK has been successfully set up and is ready to be used.

XXXXXXXXXXXXXXXXXXX

Sdk deploys anywhere you want. It contains:
- setup script
- target sysroot
- toolchain sysroot

sdk
|-- environment-setup-core2-64-nokia-linux
|-- site-config-core2-64-nokia-linux
|-- sysroots
|   |-- core2-64-nokia-linux
|   |   |-- etc
|   |   |-- lib64
|   |   |-- usr
|   |   \-- var
|   \-- i686-nsnsdk-linux
|       |-- bin
|       |-- etc
|       |-- lib
|       |-- usr
|       |-- var
|       \-- x86_64-pc-linux-gnu
\-- version-core2-64-nokia-linux

XXXXXXXXXXXXXXXXXXX

Environment script:
- changes path and pkgconfig variables:
  - you can use toolchain programs, like gcc, cmake, opkg
  - you can read *.pc files from sysroot (e.g. pkg-config --cflags prophy)
- creates CC, CXX, LD variables,
  - your build tool uses sdk compiler with proper sysroot set
- sets python and opkg environment
- sets execution-related variables (path to libs, path to dynamic linker)

export PATH=/home/***/sdk/sysroots/i686-nsnsdk-linux/usr/bin:/home/***/sdk/sysroots/i686-nsnsdk-linux/usr/bin/x86_64-nokia-linux:$PATH
export PKG_CONFIG_SYSROOT_DIR=$SDKTARGETSYSROOT
export PKG_CONFIG_PATH=$SDKTARGETSYSROOT/usr/lib64/pkgconfig
...
export CC="x86_64-pc-linux-gnu-gcc  -m64 -march=core2 -mtune=core2 -msse3 -mfpmath=sse --sysroot=$SDKTARGETSYSROOT"
export CXX="x86_64-pc-linux-gnu-g++  -m64 -march=core2 -mtune=core2 -msse3 -mfpmath=sse --sysroot=$SDKTARGETSYSROOT"
export CPP="x86_64-pc-linux-gnu-gcc -E  -m64 -march=core2 -mtune=core2 -msse3 -mfpmath=sse --sysroot=$SDKTARGETSYSROOT"
export AS="x86_64-pc-linux-gnu-as  "
export LD="x86_64-pc-linux-gnu-ld   --sysroot=$SDKTARGETSYSROOT"
...
export PYTHONPATH=$OECORE_NATIVE_SYSROOT/usr/lib/python2.7/site-packages:$PYTHONPATH
export OFFLINE_ROOT=$SDKTARGETSYSROOT
...
export SYSROOT_LIB_DIR=$SDKTARGETSYSROOT/usr/lib64:$SDKTARGETSYSROOT/lib64
export SYSROOT_DYN_LINKER=$SDKTARGETSYSROOT/lib64/ld-linux-x86-64.so.2

XXXXXXXXXXXXXXXXXXX

Toolchain sysroot contains compiler and tools.

bin
|-- x86_64-pc-linux-gnu-g++
|-- x86_64-pc-linux-gnu-gcc
|-- x86_64-pc-linux-gnu-ld
|-- x86_64-pc-linux-gnu-nm
|-- x86_64-pc-linux-gnu-readelf
|-- x86_64-pc-linux-gnu-size
|-- x86_64-pc-linux-gnu-strings
\-- x86_64-pc-linux-gnu-strip

usr
\-- bin
    |-- cmake
    |-- opkg -> opkg-cl
    |-- opkg-cl
    |-- pkg-config
    |-- prophyc
    \-- protoc

XXXXXXXXXXXXXXXXXXX

Target sysroot is a placeholder for target related
- executables & scripts
- libraries & headers & pc files
- configuration
- data
It may be empty after sdk deployment.

usr
\-- bin
    \-- CCSDaemonExe

usr
|-- include
|   \-- boost
|       \-- chrono
|           |-- ceil.hpp
|           \-- chrono.hpp
\-- lib64
    |-- pkgconfig
    |   \-- prophy.pc
    |-- libboost_chrono.so -> libboost_chrono.so.1.59.0
    \-- libboost_chrono.so.1.59.0

etc
\-- opkg
    \-- opkg.conf

usr
\-- share
    \-- bpf
        \-- bpf.xml
